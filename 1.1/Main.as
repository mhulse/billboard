package {		// Imports:	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.filters.BitmapFilterQuality;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.system.Security;		// Custom classes:	import gs.TweenLite;	import me.hulse.util.FireTrace;	import me.hulse.util.Params;	import me.hulse.util.Stager;	import me.hulse.util.LoadAds;	import me.hulse.util.HttpCookie;	import me.hulse.util.Timing;	import me.hulse.util.ClickTag;	import me.hulse.util.LockDown;		/**	* Main	*        About: Document class.	*/	public class Main extends MovieClip {				// Meta:		private static const APP_NAME:String = 'Billboard';		private static const APP_VERSION:String = '1.1';		private static const APP_MODIFIED:String = '10/15/09';		private static const APP_AUTHOR:String = 'Micky Hulse <micky@hulse.me>';				// Private:		private var _ft:FireTrace;		private var _lockDown:LockDown;		private var _stager:Stager;		private var _loadAds:LoadAds;		private var _cookie:HttpCookie;		private var _timing:Timing;		private var _clickTag:ClickTag;		private var _mainMc:MainMc; // Library linkage, no physical class file exists.		private var _cookieName:String;		private var _cookieAllowed:Boolean;		private var _cookieChecker:Boolean;		private var _contentMc:MovieClip;		private var _adMc:MovieClip;		private var _adMcLoad:MovieClip;		private var _teaseMc:MovieClip;		private var _teaseMcLoad:MovieClip;		private var _openCloseMc:MovieClip;		private var _heightClosed:String;		private var _heightOpen:String;		private var _timeOpen:Number;				// Private constants:		private static const ALLOWED_DOMAINS:String = 'registerguard.com, hulse.me, guardnet.com';				/**		* Main()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Main() {						_ft = new FireTrace();						_ft.log('Main() instantiated...');						// Meta:			_ft.log('Name: ' + APP_NAME + '; Version: ' + APP_VERSION + '; Modified: ' + APP_MODIFIED + '; Author: ' + APP_AUTHOR);						/*			** 			** Docs: 			**       In addition to protecting SWF files from cross-domain scripting originated by other SWF files, 			**       Flash Player protects SWF files from cross-domain scripting originated by HTML files.			**       HTML-to-SWF scripting can occur with older Flash browser functions such as SetVariable or callbacks established through ExternalInterface.addCallback().			**       When HTML-to-SWF scripting crosses domains, the SWF file being accessed must call allowDomain(), 			**       just as when the accessing party is a SWF file, or the operation will fail.			**       -- http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/system/Security.html#allowDomain%28%29			** 			*/			//Security.allowDomain(ALLOWED_DOMAINS);			Security.allowDomain('*'); // '*' needed for OAS to work.						// Basic securtiy checks:			_lockDown = new LockDown(ALLOWED_DOMAINS.split(','));			if (_lockDown.unlocked) { init(); }			//init();					};				/**		* init()		*        About: Load external assets and then continue program.		*      Returns: Nothing.		*/		private function init():void {						_ft.log('init()...');						// Load():			_loadAds = new LoadAds(this);			_loadAds.addEventListener(LoadAds.LOAD_COMPLETE, onLoadComplete, false, 0, true); // Wait for loading to complete.					};				/**		* onLoadComplete()		*        About: Event listener, called when loading completed.		*      Returns: Nothing.		*/		private function onLoadComplete(e:Event):void {						_ft.log('Load complete...');						_loadAds.removeEventListener(LoadAds.LOAD_COMPLETE, onLoadComplete); // GC.						// Add callbacks:			ExternalInterface.addCallback('toActionscript', fromJavascript);			ExternalInterface.addCallback('asClosed', jsClosed);						// Get embed parameters/flashvars:			getParams();						// Instantiate custom classes:			_stager = new Stager(this, "NO_SCALE", "BOTTOM"); // Setup stage.			_cookie = new HttpCookie('billboard'); // Target HTML object.			_clickTag = new ClickTag(this); // Clicktag.						// Initialize:			_cookieName = _cookie.name;			_ft.log('Cookie name: "' + _cookieName + '"');			_cookieChecker = _cookie.checkCookie(_cookieName);			_cookieAllowed = _cookie.allowed;						// Setup our primary movieclip:			_mainMc = new MainMc(); // Create new instance.			_mainMc.x = 0; // Position.			_mainMc.y = 0; // IBID.						// Other object lookups:						_contentMc = _mainMc.content_mc;			_contentMc.addEventListener(MouseEvent.MOUSE_UP, onClick, false, 0, true); // http://www.kirupa.com/forum/showthread.php?t=260312			_contentMc.buttonMode = true;			_contentMc.useHandCursor = true;						_openCloseMc = _mainMc.openclose_mc;			controller(_openCloseMc, 'stop');			_openCloseMc.addEventListener(MouseEvent.MOUSE_UP, onOpenCloseClick, false, 0, true); // http://www.kirupa.com/forum/showthread.php?t=260312						// http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&file=00000216.html			_adMcLoad = MovieClip(_loadAds.pre.objects[0]); // Cast 'DisplayObject' to 'MovieClip'.			controller(_adMcLoad, 'gotoAndStop'); // Stop until told to play.			_adMc = _contentMc.ad_mc;			_adMc.addChild(_adMcLoad); // Add to movieclip stage.						// IBID			_teaseMc = _contentMc.tease_mc;			_teaseMcLoad = MovieClip(_loadAds.pre.objects[1]);			_teaseMcLoad.x = 0;			_teaseMcLoad.y = 420 - _teaseMcLoad.height; // Make sure first number = height of document.			_teaseMc.addChild(_teaseMcLoad);						this.addChild(_mainMc); // Add to display list.						// Begin program:			startBillboard();					};				/**		* startBillboard()		*        About: Checks for existence of cookie.		*               Opens billboard if cookie not found.		*      Returns: Nothing.		*/		private function startBillboard():void {						_ft.log('startBillboard()...');						// Can we use cookies?			if (_cookieAllowed) {								// If cookie does not exist:				if (!_cookieChecker) {										_ft.log('First time visit...');										// Set cookie:					_cookie.setCookie(_cookieName, _cookieName);										// Open/close with a timer:					openTimer();									} else {										_ft.log('Cookie already set...');									}							}					};				/**		* fromJavascript()		*        About: Test function.		*               Called from javascript using ExternalInterface.addCallback().		*               I should probably delete this at some point.		*       @param: String.		*      Returns: String.		*/		private function fromJavascript(str:String):String {						/*			** 			** HTML, using "SATAY" embed technique:			** 								<object id="bb" name="bb" type="application/x-shockwave-flash" data="Billboard.swf" width="100%" height="100%">					<param name="movie" value="Billboard.swf">					<param name="allowScriptAccess" value="always">				</object>							** 			** JS, using jQuery:			** 								function callFunction(name) {					$obj = $('#billboard object')[0];					if ($obj && typeof $obj.toActionscript != 'undefined') {						alert($obj.toActionscript('Micky'));					}				}								function getFlashMovie(movieName) {					var isIE = navigator.appName.indexOf("Microsoft") != -1;					return (isIE) ? window[movieName] : document[movieName];				}								// Start closure:				$(function() {					$('#clicker').click(function() {						callFunction('bb'); // "name" of flash embed.					});				});				// End closure.							** 			*/						return 'Hello ' + str + '!';					};				/**		* getParams()		*        About: Gets these flashvars from embed:		*               1. height_closed, default: null.		*               2. height_open, default: null.		*               3. seconds, default: 10.		*      Returns: Nothing.		*/		private function getParams():void {						_ft.log('getParams()...');						// Instantiate params class:			var p:Params = new Params(this);			 			 // Get params:			_heightClosed = p.getParam("height_closed", null); // Height closed.			_heightOpen = p.getParam("height_open", null); // Height open.			_timeOpen = Number(p.getParam("seconds", '10')) * 1000; // Time, in milliseconds, open.					};				/**		* jsClosed()		*        About: Calls garbage collector.		*               Called from javascript using ExternalInterface.addCallback().		*      Returns: Nothing.		*/		private function jsClosed():void {						_ft.log('jsClosed()...');						timingGc(); // GC.						// Put ad back on its frame 1:			controller(_adMcLoad, 'gotoAndStop');					};				/**		* timingGc()		*        About: Garbage collector.		*      Returns: Nothing.		*/		private function timingGc():void {						_ft.log('timingGc()...');						if (_timing.hasEventListener(Timing.TIMING_COMPLETE)) {								// GC:				_timing.removeEventListener(Timing.TIMING_COMPLETE, onOpenClose);								_ft.log('timingGc() complete...');							}					};				/**		* openTimer()		*        About: Initializes "open" timer.		*      Returns: Nothing.		*/		private function openTimer():void {						_ft.log('openTimer()...');						// Timer:			_timing = new Timing(_timeOpen); // 10 seconds === 10,000 miliseconds.			_timing.addEventListener(Timing.TIMING_COMPLETE, onOpenClose, false, 0, true);						// Open/close:			openClose();					};				/**		* openClose()		*        About: Main control.		*               Show/hides tease.		*               Communicates with JS via billboardControl().		*               Plays the ad from the ad's frame 1.		*      Returns: Nothing.		*/		private function openClose():void {						_ft.log('openClose()...');						_ft.log('Ad current frame: ' + _adMcLoad.currentFrame);			if (_adMcLoad.currentFrame == 1) {				controller(_adMcLoad);			}						// Open/close button:			(_openCloseMc.currentFrame == 2) ? controller(_openCloseMc, 'gotoAndStop') : controller(_openCloseMc, 'gotoAndStop', 2);						// Show/hide:			(_teaseMc.visible) ? TweenLite.to(_teaseMc, 1, { autoAlpha: 0, onComplete: controller, onCompleteParams: [_teaseMcLoad, 'gotoAndStop'] }) : TweenLite.to(_teaseMc, 1, { autoAlpha: 1, onComplete: controller, onCompleteParams: [_teaseMcLoad, 'gotoAndPlay'] });						// Call javascript:			ExternalInterface.call("billboardControl", _heightClosed, _heightOpen);					};				/**		* controller()		*        About: Playback control.		*     @param01: MovieClip.		*               Target MovieClip.		*               Required.		*     @param02: String.		*               Controller type?		*               Options: 'gotoAndStop', 'gotoAndPlay', 'stop', 'play'.		*               Default is 'play'.		*     @param03: Number.		*               Frame number.		*               Default is frame #1.		*      Returns: Nothing.		*/		private function controller(mc:MovieClip, t:String = 'play', f:Number = 1):void {						_ft.log('controller(' + mc + ', ' + t + ', ' + f + ')...');						switch (t.toLowerCase()) {								case 'gotoandstop':					mc.gotoAndStop(f);					break;								case 'gotoandplay':					mc.gotoAndPlay(f);					break;								case 'stop':					mc.stop();					break;								case 'play':					mc.play();					break;							}								};				/**		* onClick()		*        About: Click listener method.		*               clickTAG initialized here.		*       @param: MouseEvent.		*      Returns: Nothing.		*/		private function onClick(e:MouseEvent):void {						_ft.log('onClick()...');						// Setup clickTAG:			_clickTag.getURL();					};				/**		* onOpenClose()		*        About: Listener method for Timing.TIMING_COMPLETE.		*               Garbage collects, and calls main control.		*       @param: Event.		*      Returns: Nothing.		*/		private function onOpenClose(e:Event):void {						_ft.log('onOpenClose()...');						// Open/close:			openClose();					};				/**		* onOpenCloseClick()		*        About: Click listener method.		*               Applied to open/close button.		*       @param: MouseEvent.		*      Returns: Nothing.		*/		private function onOpenCloseClick(e:MouseEvent):void {						_ft.log('onOpenCloseClick()...');						// Open/close with a timer:			openTimer();					};			};	};