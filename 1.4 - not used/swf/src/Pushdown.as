package {		import flash.display.*;	import flash.filters.*;	import flash.events.*;	import flash.external.*;	import flash.system.*;	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.events.*;	import com.greensock.plugins.*	import com.greensock.loading.*;	import com.greensock.loading.core.*;	import me.hulse.util.*;		public class Main extends MovieClip {				private static const APP_NAME:String = 'Pushdown';		private static const APP_VERSION:String = '1.4';		private static const APP_CREATED:String = '2009/10/8';		private static const APP_MODIFIED:String = '2012/12/20';		private static const APP_AUTHOR:String = 'Micky Hulse <micky@hulse.me>';		private static const ALLOWED_DOMAINS:Array = ['registerguard.com', 'hulse.me', 'guardnet.com'];		private var _ft:FireTrace;		private var _lockDown:LockDown2;		private var _stager:Stager;		private var _cookie:HttpCookie;		private var _timing:Timing;		private var _clickTag:ClickTag;		private var _params:Params;		private var _mainMc:MainMc;		private var _loaders:LoaderMax		private var _cookieName:String;		private var _cookieAllowed:Boolean;		private var _cookieChecker:Boolean;		private var _contentMc:MovieClip;		private var _advertMc:MovieClip;		private var _advertMcLoad:MovieClip;		private var _advertImg:Boolean;		private var _teaseMc:MovieClip;		private var _teaseMcLoad:MovieClip;		private var _teaseImg:Boolean;		private var _openCloseMc:MovieClip;		private var _heightClosed:String;		private var _heightOpen:String;		private var _timeOpen:Number;				public function Main() {						trace('Main()');						_ft = new FireTrace();						_ft.log('Main() instantiated...');						_ft.log('Name: ' + APP_NAME + '; Version: ' + APP_VERSION + '; Created: ' +  APP_CREATED + '; Modified: ' + APP_MODIFIED + '; Author: ' + APP_AUTHOR);						Security.allowDomain('*');						_lockDown = new LockDown2(ALLOWED_DOMAINS);						if (_lockDown.unlocked) {								addEventListener(Event.ADDED_TO_STAGE, init, false, 0, true);							}					};				private function init($e:Event):void {						_ft.log('init()...');						removeEventListener(Event.ADDED_TO_STAGE, init);						_params = new Params(this);						TweenPlugin.activate([AutoAlphaPlugin]);						LoaderMax.activate([ImageLoader, SWFLoader]);						var assets:Array = [				_params.getParam('tease', 'tease.swf'),				_params.getParam('advert', 'advert.swf')			];						_loaders = LoaderMax.parse(assets, { name:'mainQueue', autoDispose:true, onComplete:completeHandler }) as LoaderMax;						_loaders.load();					};				private function completeHandler($e:LoaderEvent):void {						_ft.log('Load complete...');						ExternalInterface.addCallback('asClosed', jsClosed);			 			_heightClosed = _params.getParam('height_closed', '90');			_heightOpen = _params.getParam('height_open', '415');			_timeOpen = Number(_params.getParam('seconds', '10')) * 1000;						_stager = new Stager(this, 'NO_SCALE', 'BOTTOM');						_cookie = new HttpCookie('pushdown');			_cookieName = _cookie.name;			_ft.log('Cookie name: "' + _cookieName + '"');			_cookieChecker = _cookie.checkCookie(_cookieName);			_cookieAllowed = _cookie.allowed;						_clickTag = new ClickTag(this);						_mainMc = new MainMc();			_mainMc.x = 0;			_mainMc.y = 0;			_mainMc.mouseChildren = true;						_contentMc = _mainMc.content_mc;			_contentMc.addEventListener(MouseEvent.MOUSE_UP, onClick, false, 0, true);			_contentMc.mouseChildren = false;			_contentMc.buttonMode = true;			_contentMc.useHandCursor = true;						_openCloseMc = _mainMc.openclose_mc;			controller(_openCloseMc, 'stop');			_openCloseMc.addEventListener(MouseEvent.MOUSE_UP, onOpenCloseClick, false, 0, true);						var loaders:Array = _loaders.getChildren();						_advertMc = _contentMc.ad_mc;			var advert:Object = loaders[1].rawContent;			_advertImg = isImage(advert);						if (_advertImg) {								var advertBmLoad:Bitmap = advert as Bitmap;				advertBmLoad.x = 0;				advertBmLoad.y = 415 - advertBmLoad.loaderInfo.height;				_ft.log('415 - ' + advertBmLoad.loaderInfo.height + ' = ' + advertBmLoad.y);				_advertMc.addChild(advertBmLoad);							} else {								_advertMcLoad = advert as MovieClip;				controller(_advertMcLoad, 'gotoAndStop');				_advertMcLoad.x = 0;				_advertMcLoad.y = 415 - _advertMcLoad.loaderInfo.height;				_ft.log('415 - ' + _advertMcLoad.loaderInfo.height + ' = ' + _advertMcLoad.y);				_advertMc.addChild(_advertMcLoad);							}						_teaseMc = _contentMc.tease_mc;			var tease:Object = loaders[0].rawContent;			_teaseImg = isImage(tease);						if (_teaseImg) {								var teaseBmLoad:Bitmap = tease as Bitmap				teaseBmLoad.x = 0;				teaseBmLoad.y = 415 - teaseBmLoad.loaderInfo.height;				_ft.log('415 - ' + teaseBmLoad.loaderInfo.height + ' = ' + teaseBmLoad.y);				_teaseMc.addChild(teaseBmLoad);							} else {								_teaseMcLoad = tease as MovieClip;				_teaseMcLoad.x = 0;				_teaseMcLoad.y = 415 - _teaseMcLoad.loaderInfo.height;				_ft.log('415 - ' + _teaseMcLoad.loaderInfo.height + ' = ' + _teaseMcLoad.y);				_teaseMc.addChild(_teaseMcLoad);							}						this.addChild(_mainMc);						this.startPushdown();					};				private function startPushdown():void {						_ft.log('startPushdown()...');						if (_cookieAllowed) {								if ( ! _cookieChecker) {										_ft.log('First time visit...');										_cookie.setCookie(_cookieName, _cookieName);										this.openTimer();									} else {										_ft.log('Cookie already set...');									}							}					};				private function jsClosed():void {						_ft.log('jsClosed()...');						this.timingGc();						controller(_advertMcLoad, 'gotoAndStop');					};				private function timingGc():void {						_ft.log('timingGc()...');						if (_timing.hasEventListener(Timing.TIMING_COMPLETE)) {								_timing.removeEventListener(Timing.TIMING_COMPLETE, onOpenClose);								_ft.log('timingGc() complete...');							}					};				private function openTimer():void {						_ft.log('openTimer()...');						_timing = new Timing(_timeOpen);			_timing.addEventListener(Timing.TIMING_COMPLETE, onOpenClose, false, 0, true);						this.openClose();					};				private function openClose():void {						_ft.log('openClose()...');						if ( ! _advertImg) {								_ft.log('Ad current frame: ' + _advertMcLoad.currentFrame);								if (_advertMcLoad.currentFrame == 1) {					controller(_advertMcLoad);				}							}						(_openCloseMc.currentFrame == 2) ? controller(_openCloseMc, 'gotoAndStop') : controller(_openCloseMc, 'gotoAndStop', 2);						if ( ! _teaseImg) {								(_teaseMc.visible) ? TweenLite.to(_teaseMc, 1, { autoAlpha: 0, onComplete: controller, onCompleteParams: [_teaseMcLoad, 'gotoAndStop'] }) : TweenLite.to(_teaseMc, 1, { autoAlpha: 1, onComplete: controller, onCompleteParams: [_teaseMcLoad, 'gotoAndPlay'] });							} else {								(_teaseMc.visible) ? TweenLite.to(_teaseMc, 1, { autoAlpha: 0 }) : TweenLite.to(_teaseMc, 1, { autoAlpha: 1 });							}						ExternalInterface.call('pushdownControl', _heightClosed, _heightOpen);					};				private function controller($mc:MovieClip, $t:String = 'play', $f:Number = 1):void {						_ft.log('controller(' + $mc + ', ' + $t + ', ' + $f + ')...');						switch ($t.toLowerCase()) {								case 'gotoandstop':					$mc.gotoAndStop($f);					break;								case 'gotoandplay':					$mc.gotoAndPlay($f);					break;								case 'stop':					$mc.stop();					break;								case 'play':					$mc.play();					break;							}								};				private function onClick($e:MouseEvent):void {						_ft.log('onClick()...');						_clickTag.getURL();					};				private function onOpenClose($e:Event):void {						_ft.log('onOpenClose()...');						this.openClose();					};				private function onOpenCloseClick($e:MouseEvent):void {						_ft.log('onOpenCloseClick()...');						this.openTimer();					};				private function isImage($o:*):Boolean {						var mc:MovieClip = $o as MovieClip;			return ( ! mc) ? true : false;					};			};	};