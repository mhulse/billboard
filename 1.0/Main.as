package {		// Imports:	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.filters.BitmapFilterQuality;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;		// Custom classes:	import gs.TweenLite;	import me.hulse.util.FireDeBug;	import me.hulse.util.Stager;	import me.hulse.util.LoadAds;	import me.hulse.util.HttpCookie;	import me.hulse.util.Timing;	import me.hulse.util.ClickTag;	import me.hulse.util.LockDown;		public class Main extends MovieClip {				// Private:		private var _fdb:FireDeBug;		private var _lockDown:LockDown;		private var _stager:Stager;		private var _loadAds:LoadAds;		private var _cookie:HttpCookie;		private var _timing:Timing;		private var _clickTag:ClickTag;		private var _mainMc:MainMc; // Library linkage, no physical class file exists.		private var _cookieName:String;		private var _cookieAllowed:Boolean;		private var _cookieChecker:Boolean;		private var _contentMc:MovieClip;		private var _adMc:MovieClip;		private var _adMcLoad:MovieClip;		private var _teaseMc:MovieClip;		private var _teaseMcLoad:MovieClip;		private var _openCloseMc:MovieClip;				/**		* Main()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Main() {						_fdb = new FireDeBug();						_fdb.log('Main() instantiated...');						_lockDown = new LockDown(['registerguard.com', 'hulse.me', 'guardnet.com']);						//if (_lockDown.unlocked) { init(); }						init();					};				/**		* init()		*        About: Load external assets and then continue program.		*      Returns: Nothing.		*/		private function init():void {						// Load():			_loadAds = new LoadAds(this);			_loadAds.addEventListener(LoadAds.LOAD_COMPLETE, onLoadComplete, false, 0, true); // Wait for loading to complete.					};				/**		* onLoadComplete()		*        About: Event listener, called when loading completed.		*      Returns: Nothing.		*/		private function onLoadComplete(e:Event):void {						ExternalInterface.addCallback('helloWorld', helloWorld);						_fdb.log('Load complete...');						_loadAds.removeEventListener(LoadAds.LOAD_COMPLETE, onLoadComplete); // GC.						// Instantiate custom classes:			_stager = new Stager(this, "NO_SCALE", "BOTTOM"); // Setup stage.			_cookie = new HttpCookie();			_clickTag = new ClickTag(this); // Clicktag.						// Initialize:			_cookieName = _cookie.name;			_cookieChecker = _cookie.checkCookie(_cookieName);			_cookieAllowed = _cookie.allowed;						// Setup our primary movieclip:			_mainMc = new MainMc(); // Create new instance.			_mainMc.x = 0; // Position.			_mainMc.y = 0; // IBID.						// Object lookups:			_contentMc = _mainMc.content_mc;			_contentMc.addEventListener(MouseEvent.MOUSE_UP, onClick, false, 0, true); // http://www.kirupa.com/forum/showthread.php?t=260312			_contentMc.buttonMode = true;			_contentMc.useHandCursor = true;						_openCloseMc = _mainMc.openclose_mc;			_openCloseMc.stop();			_openCloseMc.addEventListener(MouseEvent.MOUSE_UP, onOpenCloseClick, false, 0, true); // http://www.kirupa.com/forum/showthread.php?t=260312									_adMc = _contentMc.ad_mc;			// http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&file=00000216.html			_adMcLoad = MovieClip(_loadAds.pre.objects[0]); // Cast 'DisplayObject' to 'MovieClip'.			_adMcLoad.stop(); // Stop until told to play.			_adMc.addChild(_adMcLoad); // Add to movieclip stage.						// IBID			_teaseMc = _contentMc.tease_mc;			_teaseMcLoad = MovieClip(_loadAds.pre.objects[1]);			_teaseMcLoad.x = 0;			_teaseMcLoad.y = 390;			_teaseMc.addChild(_teaseMcLoad);						this.addChild(_mainMc); // Add to display list.						// Begin program:			startBillboard();					};				private function helloWorld(str:String):String {			return 'This is coming from the JS: ' + str;		};				private function startBillboard():void {						if (_cookieAllowed) {								if (_cookieChecker) {										openClose();									}							}					}				private function onClick(e:MouseEvent):void {						_fdb.log('clicked');						_clickTag.getURL();					};				private function onOpenCloseClick(e:MouseEvent):void {						_fdb.log(e.target.name + ' clicked...');						openClose()						// Timer:			_timing = new Timing(10000);			_timing.addEventListener(Timing.TIMING_COMPLETE, onOpenClose, false, 0, true);					};				private function openClose():void {						// Open/Close button:			(_openCloseMc.currentFrame == 2) ? _openCloseMc.gotoAndStop(1) : _openCloseMc.gotoAndStop(2);						// Hide:			(_teaseMc.visible) ? TweenLite.to(_teaseMc, .5, { autoAlpha: 0 }) : TweenLite.to(_teaseMc, .5, { autoAlpha: 1 });						ExternalInterface.call("billboardControl");					};				private function onOpenClose(e:Event):void {						removeEventListener(Timing.TIMING_COMPLETE, onOpenClose);						openClose();					}			};	};